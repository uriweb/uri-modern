# Declare project language and PHP versions to test against.
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    - "7.1"
    - "7.2"
    - "7.3"
    - "7.4"

# Ditch sudo and use containers.
# @link http://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link http://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false

# Declare which branches to build
branches:
    only:
    - master
    - develop
    - /^dev-.*$/
    - /^travis-.*$/

# Declare which versions of WordPress to test against.
env:
    # Master
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=1

# Start MySQL
services:
    - mysql

# Configure some things before running
before_install:
    # Disable XDebug
    - phpenv config-rm xdebug.ini
    # Install latest Node.js (sometimes Travis-CI doesn't run the latest)
    - nvm install lts/*
    # Install latest NPM (sometimes Travis-CI doesn't run the latest)
    - npm install npm@latest -g

# Use this to prepare your build for testing.
before_script:
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up theme information.
    - theme_slug=$(basename $(pwd))
    - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
    - cd ..
    - mv $theme_slug $theme_dir
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;'
    # Install CodeSniffer for WordPress Coding Standards checks.
    - mkdir php-codesniffer && curl -L https://github.com/squizlabs/PHP_CodeSniffer/archive/master.tar.gz | tar xz --strip-components=1 -C php-codesniffer
    # Install WordPress Coding Standards.
    - mkdir wordpress-coding-standards && curl -L https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/master.tar.gz | tar xz --strip-components=1 -C wordpress-coding-standards
    # Hop into CodeSniffer directory.
    - cd php-codesniffer
    # Set install path for WordPress Coding Standards
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - bin/phpcs --config-set installed_paths ../wordpress-coding-standards
    # Hop into themes directory.
    - cd $theme_dir
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash
    # Install ESLint
    - npm install -g eslint@6
    # Install WP JS standards
    - npm install @wordpress/eslint-plugin --save-dev

# Run test script commands.
script:
    # Search theme for PHP syntax errors.
    - find . \( -name '*.php' \) -exec php -lf {} \;
    # Run the theme through JavaScript Code Style checker
    - eslint .
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    - $WP_DEVELOP_DIR/php-codesniffer/bin/phpcs -p -s -v -n . --standard=./.codesniffer.ruleset.xml --extensions=php --ignore=node_modules
